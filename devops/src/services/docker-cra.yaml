Description: DockerCRA Web App (with proxy)

Parameters: 

    StackName:
        Type: String

    VPC:
        Type: AWS::EC2::VPC::Id
        
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    Listener:
        Type: String

    ListenerPriority:
        Type: Number

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 1

    ECRVersion:
        Description: Image version tag to retrieve
        Type: String

Resources:

    Service: 
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties: 
            Cluster: !Ref Cluster
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers: 
                - ContainerName: proxy
                  ContainerPort: 3478
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: docker-cra
            ContainerDefinitions:
                - Name: webapp
                  Essential: true
                  Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StackName}/webapp:${ECRVersion}
                  Memory: 250
                  MemoryReservation: 250
                  PortMappings:
                      - ContainerPort: 80
                  Environment:
                      - Name: NODE_ENV
                        Value: "production"
                      - Name: LOG_LEVEL
                        Value: "info"
                      - Name: SSR_PORT
                        Value: 80
                      - Name: SSR_ENABLED
                        Value: "yes"
                      - Name: SSR_BUILD
                        Value: "/usr/src/app/build"
                      - Name: SSR_ROOT
                        Value: "/usr/src/app/src"
                      - Name: SSR_TIMEOUT
                        Value: 5000
                      - Name: SSR_DISABLE_JS
                        Value: "no"
                      - Name: SSR_USE_WEBPACK_JS
                        Value: "no"
                      - Name: SSR_BLACKLIST
                        Value: ""
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: !Sub service-docker-cra-webapp${ECRVersion}
                - Name: proxy
                  Essential: true
                  Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StackName}/proxy:${ECRVersion}
                  Memory: 32
                  MemoryReservation: 16
                  PortMappings:
                      - ContainerPort: 3478
                  Environment:
                      - Name: NGINX_PORT
                        Value: "3478"
                      - Name: NGINX_UPSTREAM_SERVER
                        Value: webapp
                      - Name: NGINX_UPSTREAM_PORT
                        Value: "80"
                      - Name: NGINX_STATIC_FILES_ENABLED
                        Value: "true"
                      - Name: NGINX_STATIC_FILES_ROOT
                        Value: "/usr/src/app/build/"
                  Links:
                      - webapp:webapp
                  VolumesFrom:
                      - SourceContainer: webapp
                        ReadOnly: true
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: !Sub service-docker-cra-proxy${ECRVersion}

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365  

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher: 
                HttpCode: 200
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
    
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: !Ref ListenerPriority
            Conditions:
                - Field: path-pattern
                  Values: 
                    - /*
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    # This IAM Role grants the service access to register/unregister with the 
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole: 
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ecs-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                        "Action": [ "sts:AssumeRole" ]
                    }]
                }
            Policies:
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                    "ec2:AuthorizeSecurityGroupIngress",
                                    "ec2:Describe*",
                                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                    "elasticloadbalancing:Describe*",
                                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                    "elasticloadbalancing:DeregisterTargets",
                                    "elasticloadbalancing:DescribeTargetGroups",
                                    "elasticloadbalancing:DescribeTargetHealth",
                                    "elasticloadbalancing:RegisterTargets"
                                ],
                                "Resource": "*"
                        }]
                    }
                    